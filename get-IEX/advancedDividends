# This code only works with the actual IEX, not sandbox.
# ?last=4 might need to be adjusted to "1y" or "ytd".  For some reason it doesn't work despite thats what the documenation has

import requests
import sqlite3
from universal import *

def advancedDividends(cursor, token, base_url, vtype, symbol):
    try:
        tester = requests.get(base_url + "time-series/advanced_dividends/" + symbol + "?last=4/?token=" + token)
        json = tester.json()
    except:
        print("Request error for symbol " + symbol)
        return False
    cursor.execute('''INSERT INTO distribution VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)''', (json['symbol'],
                 json['exDate'], json['recordDate'], json['paymentDate'], json['announceDate'], json['frequency'],
                 json['amount'], json['declaredDate'], json['fromFactor'], json['toFactor'],
                 json['taxRate'], json['flag'],json['securityType']))
    return True



def advancedDividendsForSymbols(symbols):
    completed = []
    conn = sqlite3.connect('base.db')
    cursor = conn.cursor()

    cursor.execute("CREATE TABLE IF NOT EXISTS advancedDividends (symbol text, exDate text, recordDate text, "
                   "paymentDate text, announceDate text, frequency text, amount integer, declaredDate text,"
                   "fromFactor text, toFactor text, taxRate integer, flag text, "
                   "securityType text)")
    # if table does not exist, make it
    for i in symbols:
        success = False
        cursor.execute("DELETE FROM dividends WHERE (symbol = ?)", (i,))
        success = advancedDividends(cursor, API_token, iex_base_url, version, i)  # adds new data
        if success:
            completed.append(i)
            conn.commit()
        else:
            print("An error occurred for symbol " + i + ".  No changes were made to this row.")
            conn.close()
            conn = sqlite3.connect('base.db')
            cursor = conn.cursor()
    conn.close()
    return "Completed Advanced Dividend data update for symbols " + str(completed)

if __name__ == "__main__":
    # execute only if run as a script
    sampleSymbols = ["XOM", "AAPL", "AMZN", "NOT_A_SYMBOL"]
    print(advancedDividendsForSymbols(sampleSymbols))

